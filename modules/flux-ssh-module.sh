#!/bin/bash

# flux_ssh_module.sh - SSH hardening and configuration module
# Version: 1.0.0
# Manages SSH server configuration and security hardening

# Source helper functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "$SCRIPT_DIR/flux_helpers.sh" ]]; then
    source "$SCRIPT_DIR/flux_helpers.sh"
else
    echo "Error: flux_helpers.sh not found in $SCRIPT_DIR"
    exit 1
fi

# Set up error handling
setup_error_handling

# =============================================================================
# CONFIGURATION
# =============================================================================

# SSH configuration files
readonly SSHD_CONFIG="/etc/ssh/sshd_config"
readonly SSHD_CONFIG_DIR="/etc/ssh/sshd_config.d"
readonly SSH_HOST_KEY_DIR="/etc/ssh"
readonly SSH_BANNER="/etc/ssh/banner"

# Default settings
readonly DEFAULT_SSH_PORT="22"
readonly DEFAULT_PERMIT_ROOT="no"
readonly DEFAULT_PASSWORD_AUTH="no"
readonly DEFAULT_PUBKEY_AUTH="yes"
readonly DEFAULT_MAX_AUTH_TRIES="3"
readonly DEFAULT_MAX_SESSIONS="4"
readonly DEFAULT_CLIENT_ALIVE_INTERVAL="300"
readonly DEFAULT_CLIENT_ALIVE_COUNT_MAX="2"

# Hardening configuration file
readonly HARDENING_CONFIG="$SSHD_CONFIG_DIR/99-flux-hardening.conf"

# SSH key algorithms (in order of preference)
readonly KEY_ALGORITHMS=(
    "ed25519"
    "rsa:4096"
    "ecdsa:521"
)

# Ciphers, MACs, and KexAlgorithms for hardening
readonly SECURE_CIPHERS="chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr"
readonly SECURE_MACS="hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com"
readonly SECURE_KEX="curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512"

# =============================================================================
# SSH CONFIGURATION FUNCTIONS
# =============================================================================

# Get current SSH configuration
get_ssh_config() {
    local param="$1"
    local config_file="${2:-$SSHD_CONFIG}"
    
    # Check main config and included files
    local value=$(sshd -T 2>/dev/null | grep -i "^$param " | awk '{print $2}')
    
    if [[ -z "$value" ]]; then
        # Try to get from config file directly
        value=$(grep -i "^[[:space:]]*$param" "$config_file" 2>/dev/null | awk '{print $2}')
    fi
    
    echo "${value:-unknown}"
}

# Validate SSH configuration
validate_ssh_config() {
    log_info "Validating SSH configuration"
    
    if sshd -t; then
        log_info "SSH configuration is valid"
        return 0
    else
        log_error "SSH configuration has errors"
        return 1
    fi
}

# Backup SSH configuration
backup_ssh_config() {
    log_info "Backing up SSH configuration"
    
    # Backup main config
    backup_file "$SSHD_CONFIG"
    
    # Backup config directory
    if [[ -d "$SSHD_CONFIG_DIR" ]]; then
        local backup_dir="/etc/ssh/backup_$(date +%Y%m%d_%H%M%S)"
        sudo cp -r "$SSHD_CONFIG_DIR" "$backup_dir"
        log_info "Config directory backed up to: $backup_dir"
    fi
    
    # Backup host keys
    for key_file in "$SSH_HOST_KEY_DIR"/ssh_host_*_key; do
        if [[ -f "$key_file" ]]; then
            backup_file "$key_file"
        fi
    done
}

# =============================================================================
# SSH HARDENING FUNCTIONS
# =============================================================================

# Apply SSH hardening configuration
apply_ssh_hardening() {
    local config_data="$1"
    
    log_info "Applying SSH hardening configuration"
    
    # Create config directory if it doesn't exist
    sudo mkdir -p "$SSHD_CONFIG_DIR"
    
    # Create hardening configuration
    sudo tee "$HARDENING_CONFIG" > /dev/null << EOF
# SSH Hardening Configuration - Generated by Flux
# $(date)

# Basic Security Settings
$(echo "$config_data" | jq -r 'to_entries | .[] | select(.value != null) | "# \(.key)\n\(.key) \(.value)\n"')

# Key Exchange Algorithms
KexAlgorithms $SECURE_KEX

# Ciphers
Ciphers $SECURE_CIPHERS

# MACs
MACs $SECURE_MACS

# Host Key Algorithms
HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256

# Security Settings
StrictModes yes
IgnoreRhosts yes
HostbasedAuthentication no
PermitEmptyPasswords no
PermitUserEnvironment no
LoginGraceTime 60
MaxStartups 10:30:60
TCPKeepAlive yes
X11Forwarding no
PrintMotd no
PrintLastLog yes
Compression delayed

# Logging
SyslogFacility AUTH
LogLevel VERBOSE

# Required RSA key size (OpenSSH 7.2+)
RequiredRSASize 3072

# Disable weak algorithms
RekeyLimit 1G 1h

# SFTP configuration
Subsystem sftp /usr/lib/openssh/sftp-server -f AUTHPRIV -l INFO

EOF
    
    log_info "Hardening configuration written to: $HARDENING_CONFIG"
}

# Generate new SSH host keys
generate_host_keys() {
    local force="${1:-false}"
    
    log_info "Generating SSH host keys"
    
    # Backup existing keys
    for key_file in "$SSH_HOST_KEY_DIR"/ssh_host_*_key; do
        if [[ -f "$key_file" ]]; then
            backup_file "$key_file"
        fi
    done
    
    # Generate new keys
    for key_spec in "${KEY_ALGORITHMS[@]}"; do
        local key_type=$(echo "$key_spec" | cut -d: -f1)
        local key_bits=$(echo "$key_spec" | cut -d: -f2)
        local key_file="$SSH_HOST_KEY_DIR/ssh_host_${key_type}_key"
        
        if [[ -f "$key_file" ]] && [[ "$force" != "true" ]]; then
            log_info "Host key already exists: $key_type"
            continue
        fi
        
        log_info "Generating $key_type host key"
        
        if [[ -n "$key_bits" ]]; then
            sudo ssh-keygen -t "$key_type" -b "$key_bits" -f "$key_file" -N "" -q
        else
            sudo ssh-keygen -t "$key_type" -f "$key_file" -N "" -q
        fi
        
        # Set proper permissions
        sudo chmod 600 "$key_file"
        sudo chmod 644 "${key_file}.pub"
    done
    
    # Update HostKey entries in config
    local host_keys=""
    for key_file in "$SSH_HOST_KEY_DIR"/ssh_host_*_key; do
        if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]]; then
            host_keys="${host_keys}HostKey $key_file\n"
        fi
    done
    
    echo -e "$host_keys" | sudo tee -a "$HARDENING_CONFIG" > /dev/null
}

# Configure SSH banner
configure_ssh_banner() {
    local banner_text="${1:-}"
    local banner_type="${2:-warning}"
    
    log_info "Configuring SSH banner"
    
    # Create banner content based on type
    case "$banner_type" in
        warning)
            cat > /tmp/ssh_banner << 'EOF'
********************************************************************************
                            AUTHORIZED ACCESS ONLY
********************************************************************************

This system is for authorized users only. All activities are monitored and 
logged. Unauthorized access is prohibited and will be prosecuted to the full 
extent of the law.

By accessing this system, you consent to monitoring and acknowledge that there 
is no expectation of privacy.

********************************************************************************
EOF
            ;;
        custom)
            echo "$banner_text" > /tmp/ssh_banner
            ;;
        minimal)
            cat > /tmp/ssh_banner << 'EOF'
Authorized access only. Activities monitored.
EOF
            ;;
    esac
    
    # Apply banner
    sudo mv /tmp/ssh_banner "$SSH_BANNER"
    sudo chmod 644 "$SSH_BANNER"
    
    # Update SSH config to use banner
    if ! grep -q "^Banner " "$HARDENING_CONFIG" 2>/dev/null; then
        echo "Banner $SSH_BANNER" | sudo tee -a "$HARDENING_CONFIG" > /dev/null
    fi
    
    log_info "SSH banner configured"
}

# =============================================================================
# USER ACCESS MANAGEMENT
# =============================================================================

# Configure allowed users/groups
configure_access_control() {
    local allowed_users="${1:-}"
    local allowed_groups="${2:-}"
    local denied_users="${3:-}"
    local denied_groups="${4:-}"
    
    log_info "Configuring SSH access control"
    
    local access_config=""
    
    # AllowUsers
    if [[ -n "$allowed_users" ]]; then
        access_config="${access_config}AllowUsers $allowed_users\n"
    fi
    
    # AllowGroups
    if [[ -n "$allowed_groups" ]]; then
        access_config="${access_config}AllowGroups $allowed_groups\n"
    fi
    
    # DenyUsers
    if [[ -n "$denied_users" ]]; then
        access_config="${access_config}DenyUsers $denied_users\n"
    fi
    
    # DenyGroups
    if [[ -n "$denied_groups" ]]; then
        access_config="${access_config}DenyGroups $denied_groups\n"
    fi
    
    # Add Match rules for specific user configurations
    if [[ -n "$allowed_users" ]]; then
        # Example: Allow specific users from specific IPs
        access_config="${access_config}\n# User-specific configurations\n"
    fi
    
    echo -e "$access_config" | sudo tee -a "$HARDENING_CONFIG" > /dev/null
    
    log_info "Access control configured"
}

# Import SSH keys from GitHub
import_github_keys() {
    local username="$1"
    local github_user="$2"
    
    log_info "Importing SSH keys from GitHub user: $github_user"
    
    # Get user's home directory
    local user_home=$(getent passwd "$username" | cut -d: -f6)
    if [[ -z "$user_home" ]]; then
        log_error "User $username not found"
        return 1
    fi
    
    # Create .ssh directory
    local ssh_dir="$user_home/.ssh"
    sudo mkdir -p "$ssh_dir"
    sudo chown "$username:$username" "$ssh_dir"
    sudo chmod 700 "$ssh_dir"
    
    # Download and validate keys
    local temp_keys="/tmp/github_keys_$$"
    if safe_download "https://github.com/${github_user}.keys" "$temp_keys"; then
        # Validate keys
        local valid_keys="/tmp/valid_keys_$$"
        > "$valid_keys"
        
        while IFS= read -r key; do
            if [[ -n "$key" ]] && echo "$key" | ssh-keygen -l -f - &>/dev/null; then
                echo "$key" >> "$valid_keys"
            fi
        done < "$temp_keys"
        
        # Add to authorized_keys
        if [[ -s "$valid_keys" ]]; then
            local auth_keys="$ssh_dir/authorized_keys"
            cat "$valid_keys" | sudo tee -a "$auth_keys" > /dev/null
            sudo chown "$username:$username" "$auth_keys"
            sudo chmod 600 "$auth_keys"
            
            local key_count=$(wc -l < "$valid_keys")
            log_info "Added $key_count SSH keys for user $username"
        else
            log_warn "No valid SSH keys found for GitHub user $github_user"
        fi
        
        rm -f "$temp_keys" "$valid_keys"
    else
        log_error "Failed to download SSH keys from GitHub"
        return 1
    fi
}

# =============================================================================
# FAIL2BAN INTEGRATION
# =============================================================================

# Configure fail2ban for SSH
configure_fail2ban_ssh() {
    local max_retries="${1:-5}"
    local ban_time="${2:-3600}"
    local find_time="${3:-600}"
    
    log_info "Configuring fail2ban for SSH protection"
    
    # Check if fail2ban is installed
    if ! command -v fail2ban-client >/dev/null 2>&1; then
        log_warn "fail2ban is not installed"
        if prompt_yes_no "Install fail2ban?" "y"; then
            local distro=$(detect_distro)
            case "$distro" in
                ubuntu|debian|mint|pop)
                    sudo apt-get update
                    sudo apt-get install -y fail2ban
                    ;;
                centos|fedora|rhel|rocky|almalinux)
                    sudo yum install -y fail2ban || sudo dnf install -y fail2ban
                    ;;
            esac
        else
            return 0
        fi
    fi
    
    # Create SSH jail configuration
    local jail_config="/etc/fail2ban/jail.d/ssh.conf"
    sudo tee "$jail_config" > /dev/null << EOF
[sshd]
enabled = true
port = $(get_ssh_config "Port")
filter = sshd
logpath = /var/log/auth.log
maxretry = $max_retries
bantime = $ban_time
findtime = $find_time
ignoreip = 127.0.0.1/8 ::1

# Additional SSH jail for aggressive bans
[sshd-aggressive]
enabled = true
port = $(get_ssh_config "Port")
filter = sshd
logpath = /var/log/auth.log
maxretry = 2
bantime = 86400
findtime = 3600
ignoreip = 127.0.0.1/8 ::1
EOF
    
    # Restart fail2ban
    sudo systemctl restart fail2ban
    
    log_info "fail2ban configured for SSH protection"
}

# =============================================================================
# SSH AUDIT AND COMPLIANCE
# =============================================================================

# Run SSH audit using ssh-audit if available
run_ssh_audit() {
    local audit_tool="ssh-audit"
    local port=$(get_ssh_config "Port")
    
    log_info "Running SSH security audit"
    
    # Check if ssh-audit is installed
    if ! command -v "$audit_tool" >/dev/null 2>&1; then
        log_info "Installing ssh-audit"
        
        # Try to install via package manager or download
        if command -v pip3 >/dev/null 2>&1; then
            sudo pip3 install ssh-audit
        else
            log_warn "ssh-audit not available"
            return 1
        fi
    fi
    
    # Run audit
    echo -e "\n${CYAN}=== SSH Security Audit Results ===${NC}"
    $audit_tool -p "$port" localhost || true
    
    # Basic manual checks
    echo -e "\n${WHITE}Manual Security Checks:${NC}"
    
    # Check for weak algorithms
    echo -n "Weak ciphers: "
    local weak_ciphers=$(sshd -T | grep -i ciphers | grep -E "(3des|arcfour|blowfish)")
    if [[ -n "$weak_ciphers" ]]; then
        echo -e "${RED}Found${NC}"
    else
        echo -e "${GREEN}None${NC}"
    fi
    
    # Check key permissions
    echo -n "Host key permissions: "
    local bad_perms=0
    for key in "$SSH_HOST_KEY_DIR"/ssh_host_*_key; do
        if [[ -f "$key" ]]; then
            local perms=$(stat -c %a "$key" 2>/dev/null)
            if [[ "$perms" != "600" ]]; then
                ((bad_perms++))
            fi
        fi
    done
    
    if [[ $bad_perms -eq 0 ]]; then
        echo -e "${GREEN}Correct${NC}"
    else
        echo -e "${RED}$bad_perms files with incorrect permissions${NC}"
    fi
}

# =============================================================================
# INTERACTIVE CONFIGURATION
# =============================================================================

# Interactive SSH hardening wizard
ssh_hardening_wizard() {
    echo -e "${CYAN}=== SSH Hardening Wizard ===${NC}"
    echo
    
    # Backup first
    backup_ssh_config
    
    # Collect configuration
    local config_json="{}"
    
    # SSH Port
    local current_port=$(get_ssh_config "Port")
    echo "Current SSH port: $current_port"
    local new_port=$(prompt_with_validation "Enter SSH port" "validate_port" "$current_port" "Invalid port number")
    config_json=$(echo "$config_json" | jq --arg p "$new_port" '.Port = $p')
    
    # Root login
    echo -e "\n${WHITE}Root Login Policy:${NC}"
    echo "1) Prohibit (recommended)"
    echo "2) Without password only"
    echo "3) Yes (not recommended)"
    read -p "Select option [1-3]: " root_choice
    
    case "$root_choice" in
        2) config_json=$(echo "$config_json" | jq '.PermitRootLogin = "prohibit-password"') ;;
        3) config_json=$(echo "$config_json" | jq '.PermitRootLogin = "yes"') ;;
        *) config_json=$(echo "$config_json" | jq '.PermitRootLogin = "no"') ;;
    esac
    
    # Password authentication
    if prompt_yes_no "Disable password authentication?" "y"; then
        config_json=$(echo "$config_json" | jq '.PasswordAuthentication = "no"')
        config_json=$(echo "$config_json" | jq '.ChallengeResponseAuthentication = "no"')
    else
        config_json=$(echo "$config_json" | jq '.PasswordAuthentication = "yes"')
    fi
    
    # Public key authentication
    config_json=$(echo "$config_json" | jq '.PubkeyAuthentication = "yes"')
    
    # Connection limits
    echo -e "\n${WHITE}Connection Limits:${NC}"
    local max_auth=$(prompt_with_validation "Max authentication attempts" "" "$DEFAULT_MAX_AUTH_TRIES" "Must be a number")
    local max_sessions=$(prompt_with_validation "Max concurrent sessions" "" "$DEFAULT_MAX_SESSIONS" "Must be a number")
    
    config_json=$(echo "$config_json" | jq --arg ma "$max_auth" '.MaxAuthTries = $ma')
    config_json=$(echo "$config_json" | jq --arg ms "$max_sessions" '.MaxSessions = $ms')
    
    # Client keepalive
    config_json=$(echo "$config_json" | jq --arg interval "$DEFAULT_CLIENT_ALIVE_INTERVAL" '.ClientAliveInterval = $interval')
    config_json=$(echo "$config_json" | jq --arg max "$DEFAULT_CLIENT_ALIVE_COUNT_MAX" '.ClientAliveCountMax = $max')
    
    # Access control
    echo -e "\n${WHITE}Access Control:${NC}"
    read -p "Allowed users (space-separated, or empty for all): " allowed_users
    read -p "Allowed groups (space-separated, or empty for all): " allowed_groups
    
    # Apply configuration
    apply_ssh_hardening "$config_json"
    
    # Configure access control if specified
    if [[ -n "$allowed_users" || -n "$allowed_groups" ]]; then
        configure_access_control "$allowed_users" "$allowed_groups"
    fi
    
    # Generate new host keys
    if prompt_yes_no "Generate new host keys?" "y"; then
        generate_host_keys
    fi
    
    # Configure banner
    if prompt_yes_no "Configure SSH banner?" "y"; then
        configure_ssh_banner
    fi
    
    # Configure fail2ban
    if prompt_yes_no "Configure fail2ban protection?" "y"; then
        configure_fail2ban_ssh
    fi
    
    # Import GitHub keys
    if prompt_yes_no "Import SSH keys from GitHub?" "n"; then
        read -p "Enter local username: " local_user
        read -p "Enter GitHub username: " github_user
        import_github_keys "$local_user" "$github_user"
    fi
    
    # Validate and restart
    if validate_ssh_config; then
        echo -e "\n${GREEN}SSH configuration is valid${NC}"
        
        if prompt_yes_no "Restart SSH service now?" "y"; then
            sudo systemctl restart sshd || sudo systemctl restart ssh
            echo -e "${GREEN}SSH service restarted${NC}"
            echo -e "${YELLOW}IMPORTANT: Test SSH connection on port $new_port before closing this session!${NC}"
        fi
    else
        echo -e "${RED}SSH configuration has errors. Not restarting service.${NC}"
        return 1
    fi
}

# =============================================================================
# SERVICE MANAGEMENT
# =============================================================================

# Get SSH service name
get_ssh_service_name() {
    if systemctl list-unit-files | grep -q "^sshd.service"; then
        echo "sshd"
    else
        echo "ssh"
    fi
}

# Restart SSH service safely
restart_ssh_service() {
    local service_name=$(get_ssh_service_name)
    
    log_info "Restarting SSH service: $service_name"
    
    # Validate configuration first
    if ! validate_ssh_config; then
        log_error "SSH configuration is invalid. Not restarting."
        return 1
    fi
    
    # Get current port
    local port=$(get_ssh_config "Port")
    
    # Restart service
    if sudo systemctl restart "$service_name"; then
        log_info "SSH service restarted successfully"
        
        # Test connection
        sleep 2
        if nc -z localhost "$port" 2>/dev/null; then
            log_info "SSH service is listening on port $port"
            return 0
        else
            log_error "SSH service is not responding on port $port"
            return 1
        fi
    else
        log_error "Failed to restart SSH service"
        return 1
    fi
}

# =============================================================================
# STATUS AND INFORMATION
# =============================================================================

# Show SSH configuration status
show_ssh_status() {
    echo -e "${CYAN}=== SSH Configuration Status ===${NC}"
    
    # Service status
    local service_name=$(get_ssh_service_name)
    echo -e "\n${WHITE}Service Status:${NC}"
    
    if systemctl is-active --quiet "$service_name"; then
        echo -e "  Status: ${GREEN}Active${NC}"
        local uptime=$(systemctl show "$service_name" --property=ActiveEnterTimestamp --value)
        echo "  Since: $uptime"
    else
        echo -e "  Status: ${RED}Inactive${NC}"
    fi
    
    # Configuration
    echo -e "\n${WHITE}Current Configuration:${NC}"
    echo "  Port: $(get_ssh_config Port)"
    echo "  PermitRootLogin: $(get_ssh_config PermitRootLogin)"
    echo "  PasswordAuthentication: $(get_ssh_config PasswordAuthentication)"
    echo "  PubkeyAuthentication: $(get_ssh_config PubkeyAuthentication)"
    echo "  MaxAuthTries: $(get_ssh_config MaxAuthTries)"
    echo "  MaxSessions: $(get_ssh_config MaxSessions)"
    
    # Host keys
    echo -e "\n${WHITE}Host Keys:${NC}"
    for key in "$SSH_HOST_KEY_DIR"/ssh_host_*_key.pub; do
        if [[ -f "$key" ]]; then
            local key_type=$(basename "$key" | sed 's/ssh_host_//' | sed 's/_key.pub//')
            local fingerprint=$(ssh-keygen -l -f "$key" | awk '{print $2}')
            echo "  $key_type: $fingerprint"
        fi
    done
    
    # Active connections
    echo -e "\n${WHITE}Active Connections:${NC}"
    local connections=$(ss -tn | grep ":$(get_ssh_config Port) " | grep ESTAB | wc -l)
    echo "  Active SSH connections: $connections"
    
    # fail2ban status
    if command -v fail2ban-client >/dev/null 2>&1; then
        echo -e "\n${WHITE}Fail2ban Status:${NC}"
        if systemctl is-active --quiet fail2ban; then
            local banned=$(sudo fail2ban-client status sshd 2>/dev/null | grep "Currently banned" | awk '{print $NF}')
            echo "  Status: Active"
            echo "  Currently banned IPs: ${banned:-0}"
        else
            echo "  Status: Inactive"
        fi
    fi
}

# =============================================================================
# COMMAND LINE INTERFACE
# =============================================================================

usage() {
    cat << EOF
Usage: $0 [options]

SSH hardening and configuration module.

Options:
    -h, --help              Display this help message
    -s, --status            Show SSH configuration status
    -w, --wizard            Run interactive hardening wizard
    -p, --port PORT         Set SSH port
    -r, --restart           Restart SSH service
    -a, --audit             Run SSH security audit
    -k, --keygen            Generate new host keys
    -b, --banner [TYPE]     Configure SSH banner (warning|minimal|custom)
    --github USER LOCAL     Import GitHub SSH keys
    --fail2ban              Configure fail2ban protection

Quick Actions:
    --harden                Apply recommended hardening (non-interactive)
    --disable-password      Disable password authentication
    --disable-root          Disable root login

Examples:
    $0 -s                   # Show status
    $0 -w                   # Run hardening wizard
    $0 -p 2222              # Change SSH port
    $0 --harden             # Apply recommended hardening
    $0 --github myuser john # Import GitHub keys for local user john

EOF
    exit 0
}

# =============================================================================
# MAIN EXECUTION
# =============================================================================

main() {
    local action="status"
    local extra_args=()
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                usage
                ;;
            -s|--status)
                action="status"
                shift
                ;;
            -w|--wizard)
                action="wizard"
                shift
                ;;
            -p|--port)
                action="port"
                extra_args=("$2")
                shift 2
                ;;
            -r|--restart)
                action="restart"
                shift
                ;;
            -a|--audit)
                action="audit"
                shift
                ;;
            -k|--keygen)
                action="keygen"
                shift
                ;;
            -b|--banner)
                action="banner"
                extra_args=("${2:-warning}")
                [[ "$2" != "--"* ]] && shift
                shift
                ;;
            --github)
                action="github"
                extra_args=("$2" "$3")
                shift 3
                ;;
            --fail2ban)
                action="fail2ban"
                shift
                ;;
            --harden)
                action="harden"
                shift
                ;;
            --disable-password)
                action="disable-password"
                shift
                ;;
            --disable-root)
                action="disable-root"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                usage
                ;;
        esac
    done
    
    log_info "Flux SSH module started"
    
    # Execute action
    case "$action" in
        status)
            show_ssh_status
            ;;
        wizard)
            ssh_hardening_wizard
            ;;
        port)
            if [[ -z "${extra_args[0]}" ]]; then
                log_error "Port number required"
                exit 1
            fi
            backup_ssh_config
            local config_json=$(jq -n --arg p "${extra_args[0]}" '{Port: $p}')
            apply_ssh_hardening "$config_json"
            restart_ssh_service
            ;;
        restart)
            restart_ssh_service
            ;;
        audit)
            run_ssh_audit
            ;;
        keygen)
            backup_ssh_config
            generate_host_keys true
            ;;
        banner)
            configure_ssh_banner "" "${extra_args[0]}"
            ;;
        github)
            if [[ ${#extra_args[@]} -lt 2 ]]; then
                log_error "GitHub username and local username required"
                exit 1
            fi
            import_github_keys "${extra_args[1]}" "${extra_args[0]}"
            ;;
        fail2ban)
            configure_fail2ban_ssh
            ;;
        harden)
            # Apply recommended hardening automatically
            backup_ssh_config
            local config_json=$(jq -n '{
                Port: "22",
                PermitRootLogin: "no",
                PasswordAuthentication: "no",
                PubkeyAuthentication: "yes",
                MaxAuthTries: "3",
                MaxSessions: "4",
                ClientAliveInterval: "300",
                ClientAliveCountMax: "2"
            }')
            apply_ssh_hardening "$config_json"
            generate_host_keys
            configure_ssh_banner
            validate_ssh_config
            ;;
        disable-password)
            backup_ssh_config
            local config_json='{"PasswordAuthentication": "no", "ChallengeResponseAuthentication": "no"}'
            apply_ssh_hardening "$config_json"
            restart_ssh_service
            ;;
        disable-root)
            backup_ssh_config
            local config_json='{"PermitRootLogin": "no"}'
            apply_ssh_hardening "$config_json"
            restart_ssh_service
            ;;
    esac
}

# Run main function
main "$@"